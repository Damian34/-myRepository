
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Stroke;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.ObjectOutputStream;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;

/**
 *
 * @author dami
 */
public class JFrameAplication extends javax.swing.JFrame {
    
    //private int aktualnaKolumna = 0;
    private double kat_g=0;
    private int typ=0; //typ wykresu np dyskretny=1 ,normalny=2 ,wykres rozproszeń=3 ,standaryzacja=4 ,oceny=5
    private int typ_wys=1;//typ kolejnosci wystopien ,1-alfabetyczny ,2-wg kolejnosci wystopien ,3-wg ilosci wystopien
    //private double dopasowanie=0; //wspolczynnik dopasowania punktow na wykresie i wartosci do na obu osiach
    private int kol_nr=0; //wybieram numer 1 kolumny
    private int kol_nr2=0;//wybieram numer 2 kolumny
    private int kol_nr3=0;//wybieram numer 3 kolumny
    
    public Tabela kol;
    private int roz =300;//rozpiętość osi x od punktu 0,0 w prawo i od punktu 0,0 w lewo
    private boolean naglowki=true;//zmienna oznacza czy są naglowki w tabeli
    private boolean kolor=false;//do wykresu rozproszen
    
    public int x0=400;
    public int y0=315;
    
    public List<String> listx=new ArrayList<>();
    public List<String> wyniki = new ArrayList<>();
    
    Graphics2D g;
    
    public Odswierz odsw = new Odswierz();
    
    //klasa pomocnicza do zapamietywania i do odswierzania wykresu
    private class Odswierz{
        
        boolean nowa=true;
        
        public double max_x;
        public int ilosc_x;
        public double max_y;
        public int ilosc_y;
        public List<Punkt> punkty;
        public boolean pkt;
        public boolean linie;
        public boolean info;
        public String nazwa_x;
        public String nazwa_y;
        public boolean rozproszenia;
        public List<Slowo2> lista;
        
        Odswierz(){}
        
        Odswierz(double max_x ,int ilosc_x,double max_y,int ilosc_y ,List<Punkt> punkty ,boolean pkt,boolean linie,boolean info,String nazwa_x,String nazwa_y,boolean rozproszenia,List<Slowo2> lista)
        {
            this.max_x=max_x;
            this.ilosc_x=ilosc_x;
            this.max_y=max_y;
            this.ilosc_y=ilosc_y;
            this.punkty=punkty;
            this.pkt=pkt;
            this.linie=linie;
            this.info=info;
            this.nazwa_x=nazwa_x;
            this.nazwa_y=nazwa_y;
            this.rozproszenia=rozproszenia;
            this.lista=lista;
            
            nowa=false;
        }
        
        public void setNew(double max_x ,int ilosc_x,double max_y,int ilosc_y ,List<Punkt> punkty ,boolean pkt,boolean linie,boolean info,String nazwa_x,String nazwa_y,boolean rozproszenia,List<Slowo2> lista)
        {
            this.max_x=max_x;
            this.ilosc_x=ilosc_x;
            this.max_y=max_y;
            this.ilosc_y=ilosc_y;
            this.punkty=punkty;
            this.pkt=pkt;
            this.linie=linie;
            this.info=info;
            this.nazwa_x=nazwa_x;
            this.nazwa_y=nazwa_y;
            this.rozproszenia=rozproszenia;
            this.lista=lista;
            
            nowa=false;
        }
    }
    
    /**
     * Creates new form JFrameAplication
     */
    public JFrameAplication() {
        this.setTitle("Aplikacja");
        
        initComponents();
        try {
        UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
        SwingUtilities.updateComponentTreeUI(this);
        this.pack();
        } 
        catch (Exception e) {}
        //Panel2();
        jPanel1.setBackground(Color.white);
        //kol=new Kolumny();
        kol=new Tabela(naglowki,typ_wys);
        
        ///////////////////////
        jButton11.setVisible(false);
        jButton12.setVisible(false);
        
        listx=kol.getLinie();
        g = (Graphics2D)jPanel1.getGraphics();
        
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        jFrame2 = new javax.swing.JFrame();
        jPanel1 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        label1 = new java.awt.Label();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jButton7 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        jButton16 = new javax.swing.JButton();
        jButton17 = new javax.swing.JButton();
        jButton18 = new javax.swing.JButton();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jFrame2Layout = new javax.swing.GroupLayout(jFrame2.getContentPane());
        jFrame2.getContentPane().setLayout(jFrame2Layout);
        jFrame2Layout.setHorizontalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame2Layout.setVerticalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jPanel1MouseMoved(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 819, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 625, Short.MAX_VALUE)
        );

        jTextField1.setText("0");

        jButton2.setText("Wybierz kolumny");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        jButton3.setText("dyskretyzacja zmiennych rzeczywistych");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });

        jButton5.setText("obracanie włącz / wyłącz");
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton5MouseClicked(evt);
            }
        });

        jButton6.setText("normalizacja zmiennych rzeczywistych");
        jButton6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton6MouseClicked(evt);
            }
        });

        label1.setText("Kolumna1            Kolumna2              Kolumna3        ");

        jTextField3.setText("0");

        jTextField4.setText("0");

        jButton7.setText("wykres rozproszeń dwuwymiarowy");
        jButton7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton7MouseClicked(evt);
            }
        });

        jLabel1.setText(" Liczba przedzialów  :");

        jTextField5.setText("5");

        jButton8.setText("alfabetycznej");
        jButton8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton8MouseClicked(evt);
            }
        });

        jButton9.setText("kolejnosci wystąpień");
        jButton9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton9MouseClicked(evt);
            }
        });

        jButton10.setText("ilości wystąpień");
        jButton10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton10MouseClicked(evt);
            }
        });

        jLabel2.setText("Typy sortowania tekstu wg kolejności:");

        jButton11.setText("Zobacz klasy");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jButton12.setText("Zaznacz klasy");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jButton15.setText("Wykres 3D");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });

        jButton1.setText("Podejrzyj tabele");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton4.setText("dodaj kolumne");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton13.setText("standaryzacja zmiennych rzeczywistych");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        jButton14.setText("Oceniaj Knn");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        jButton16.setText("Odswierz");
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });

        jButton17.setText("Wykres 2D");
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });

        jButton18.setText("Ocena Drzewa");
        jButton18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton18ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())))
                    .addComponent(jButton15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jButton13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jButton16)
                                .addContainerGap())
                            .addComponent(jButton17, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton12)
                            .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton14, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton18, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(jButton6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton13)
                .addGap(7, 7, 7)
                .addComponent(jButton7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addGap(4, 4, 4)
                .addComponent(jButton12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton16)
                .addGap(44, 44, 44)
                .addComponent(jButton17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton14)
                    .addComponent(jButton18))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton8)
                    .addComponent(jButton10)
                    .addComponent(jButton9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton5)
                .addGap(15, 15, 15))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        label1.getAccessibleContext().setAccessibleName("Kolumna1             Kolumna2         Kolumna3");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    public int maxRoz(List<String> list)
    {
        //zwraca maxymalny rozmiar String'a na liście
        int max=0;
        for(int i=0;i<list.size();i++)
        if(list.get(i).length() > max)
        {
            max=list.get(i).length();
        }
        
        return max;
    }
        
    public void clean()
    {        
        int x= jPanel1.getHeight();
        int y = jPanel1.getWidth();
        g.setColor(Color.white);
        for(int i=0;i<y;i++){g.drawLine(i, 0, i, y);}//czyszcze panel
        g.setColor(Color.black);
    }
    
    private double skroc(double p,int ile)
    {
        if(ile<2)
        {
            ile=2;
        }
        //skraca długośc liczby double do 2 miejsc po kropce
        try{
        String s=p+"";
        //System.out.println((int)p);
        String s2="";
        for(int i=0;i<s.length();i++)
        {
            s2=s2+s.charAt(i);
            if(s.charAt(i)=='.')
            {
                for(int j=1;j<ile+1 && i+j<s.length();j++)
                {
                    s2=s2+s.charAt(j+i);
                }break;
            }
        }
        return Double.valueOf(s2);
        }catch(Exception e){}
        return 0;
    }
    
    
    public void rysP(int x0 ,int y0)
    {
        //ryzuje punkt
        g.drawLine(x0, y0, x0, y0);
        g.drawOval(x0-1, y0-1, 2, 2);
        g.drawOval(x0-3, y0-3, 6, 6);
    }
    
    public void linia(boolean wlacz)
    {
        ///////////////////
        /*//Stroke zmiania wygląd linii na np przerwyaną
        Stroke s = new BasicStroke(1.0f,                      // Width
                           BasicStroke.CAP_SQUARE,    // End cap
                           BasicStroke.JOIN_MITER,    // Join style
                           2.0f,                     // Miter limit
                           new float[] {2.0f,2.0f}, // Dash pattern
                           0.0f);                     // Dash phase
        g.setStroke(s);
        g.setStroke(new BasicStroke(1.0f ,BasicStroke.CAP_ROUND,BasicStroke.JOIN_ROUND));*/
        ////////////////////
                
        if(wlacz)
        {
        
        g.setColor(new Color(200,200,200));
                
        Stroke s = new BasicStroke(1.2f,                      // Width
                           BasicStroke.CAP_SQUARE,    // End cap
                           BasicStroke.JOIN_MITER,    // Join style
                           1.0f,                     // Miter limit
                           new float[] {6.0f}, // Dash pattern
                           1.0f);                     // Dash phase
        g.setStroke(s);            
        }
        
        if(!wlacz)
        {
                        
        g.setColor(Color.black);
        g.setStroke(new BasicStroke());
        }
                
    }
    
    public void wykres(double max_x ,int ilosc_x,double max_y,int ilosc_y ,List<Punkt> punkty ,boolean pkt,boolean linie,boolean info,String nazwa_x,String nazwa_y)
    {
        wykres(max_x,ilosc_x,max_y,ilosc_y,punkty,pkt,linie,info,nazwa_x,nazwa_y,false,null);
    }
    public void wykres(double max_x ,int ilosc_x,double max_y,int ilosc_y ,List<Punkt> punkty ,boolean pkt,boolean linie,boolean info)
    {
        wykres(max_x,ilosc_x,max_y,ilosc_y,punkty,pkt,linie,info,"os X","os Y",false,null);
    }
    //rysuje sam wykes
    public void wykres(double max_x ,int ilosc_x,double max_y,int ilosc_y ,List<Punkt> punkty ,boolean pkt,boolean linie,boolean info,String nazwa_x,String nazwa_y,boolean rozproszenia,List<Slowo2> lista)
    {//pkt oznacza czy rysowac pkt ,linie oznaczaja czy rysowac linie ,info oznacza czy wyswietlac informacje
        //nazwa_x -nazwa osi ox ,nazwa_y nazwa osi oy
                
        ///////////////////////////////
        //rysuje uklad ,3 miejsa po przecinku
        uklad(max_x,ilosc_x,max_y,ilosc_y,3);
        //zapamietuje dane do wykresu
        odsw.setNew(max_x ,ilosc_x,max_y,ilosc_y ,punkty ,pkt,linie,info,nazwa_x,nazwa_y,rozproszenia,lista);
        
        ///////////////////////////////
        
        double o1=0,o2=0;//sprawdzam czy sa to poprawne max na osi x i y
        for(int i=0;i<punkty.size();i++)
        {
            if(Math.abs(punkty.get(i).x)>o1){o1=Math.abs(punkty.get(i).x);}
            if(Math.abs(punkty.get(i).y)>o2){o2=Math.abs(punkty.get(i).y);}
        }//zmieniam max_x i max_y na wartosci maksymalne jeśli są inne
        if(o1>max_x){max_x=o1;}
        if(o2>max_y){max_y=o2;}
        
        
        double h1=((double)roz)/max_x;//jest to dlugosc 1 jednsotki na komputerze ktora jest rowna 1 jednosce w rzeczywistosci na osi y
        double h2=((double)roz)/max_y;//jest to dlugosc 1 jednsotki na komputerze ktora jest rowna 1 jednosce w rzeczywistosci na osi x

        if(info)
        {
        String kk = kol.Naglow().get(kol_nr);
        g.drawString("kolumna: "+kk, 10, 20);
        }
        //podpisuje 
        g.drawString(nazwa_x, x0+roz+20, y0+40);
        g.drawString(nazwa_y, x0-150, y0-roz);
            
        
        ///////////////////////////
        List<String> pom=new ArrayList<>(); //lista bez powtorek
        try{
        if(rozproszenia)//jesli mam wykres rozproszenia
        {
            List<String> pom2=new ArrayList<>();
        
            for(int i=0;i<lista.size();i++)
            {
                pom2.add(lista.get(i).getSlowo());
            }
            
            pom=kol.zmniejsz(pom2);
            
                        
        }
        }catch(Exception e){}
        
        //RenderList ren = new RenderList(kol.ileWierszy());
        RenderList ren = new RenderList(pom.size());
        List<Color> col=ren.colory();
                
        
            try{
            if(rozproszenia)//jesli mam wykres rozproszenia to koloruje punkty
            {
                for(int i=0;i<lista.size();i++)//przechodze po liscie z powtorkami
                {
                Punkt q0=new Punkt(x0,y0-lista.get(i).getLiczba2()*h2);
                Punkt q1=new Punkt(x0+lista.get(i).getLiczba1()*h1,y0-lista.get(i).getLiczba2()*h2);
                Punkt q2=Obrot(q0,q1,kat_g);
                double p1=q2.x;
                double p2=q2.y;

                /////////////////       
                    
                for(int j=0;j<pom.size();j++)//przechodze po liscie bez powtorek
                //if(punkty.get(j).y==pom.get(i))
                if(lista.get(i).getSlowo().equals(pom.get(j)))
                {     
                    g.setColor(col.get(j));
                    rysP((int)p1,(int)p2);                    
                }
                
                g.setColor(Color.black);  
                }
            }
            }catch(Exception e){}
        
        //rysowanie
        for(int i=0;i<punkty.size();i++)
        {
            Punkt q0=new Punkt(x0,y0-punkty.get(i).y*h2);
            Punkt q1=new Punkt(x0+punkty.get(i).x*h1,y0-punkty.get(i).y*h2);
            Punkt q2=Obrot(q0,q1,kat_g);
            double p1=q2.x;
            double p2=q2.y;
            
            /////////////////
            if(!rozproszenia)
            if(pkt)
            rysP((int)p1,(int)p2);
               
            /////////////////
            
            if(linie)
            if(i<punkty.size()-1)//tutaj zmienic pod obrot
            {
                Punkt q3=new Punkt(x0,y0-punkty.get(i+1).y*h2);
                Punkt q4=new Punkt(x0+punkty.get(i+1).x*h1,y0-punkty.get(i+1).y*h2);
                Punkt q5=Obrot(q3,q4,kat_g);                
                
                g.drawLine((int)p1,(int)p2, (int)q5.x,(int)q5.y);
            }  
            
            //g.drawString(""+p1+","+p2+" | "+(x0+p1*h1)+","+(y0-p2*h2), 150, 200+i*15);
        }
        
    }
    
    
    public void uklad_x(double max_x,int ilosc_x,int miejsca_po_przecinku)//podana jest os x ,a y jest wybrana przezemnie
    {
        uklad(max_x,ilosc_x,10,10,miejsca_po_przecinku);
    }
    public void uklad_y(double max_y,int ilosc_y,int miejsca_po_przecinku)//podana jest os y ,a x jest wybrana przezemnie
    {
        uklad(10,10,max_y,ilosc_y,miejsca_po_przecinku);
    }
    
    private void uklad(double max_x ,int ilosc_x,double max_y,int ilosc_y,int miejsca_po_przecinku)//1
    {      
        //(Graphics2D g,int roz,double max_x ,double max_y,int ilosc_x,int ilosc_y)//1
        //roz - rozpietosc kazdej pol osi ,max_x - maksymalna dlugosc pol osi x do odczytu 
        //max_y maksymalna dlugosc pol osi y do odczytu ,ilosc_x - ilosc przedzialow do zrobienia na pol osi x 
        //ilosc_y - ilosc przedzialow do zrobienia na pol osi y
        //miejsca_po_przecinku przy nanoszeniu wartosci na os
        
        //int x0=400,y0=315;//środek układu
        
        g.drawLine(x0,10,x0,y0);//oś y1 gorna
        g.drawLine(x0,y0,x0,2*y0-10);//oś y1 dolna
        //g.drawLine(x0,y0,x0+300,y0);//oś x1 prawa
        //g.drawLine(x0-300,y0,x0,y0);//oś x2 lewa
        
        double kat3=kat_g;//Math.PI/8;//kąt obrotu względem osi y
        //int roz=300;//rozpiętość osi x od punktu 0,0 w prawo i od punktu 00 w lewo
        
        /////////////////
        Punkt p0=new Punkt(x0,y0);//środek układu
        ////////////////
        //formatuje os y
        int d=roz/ilosc_y;//roz/10;
        int d2=roz/ilosc_x;//roz/10;
        double h1=max_y/ilosc_y;//dlugosc odcinka do odczytania ,a nie fizycznie
                
        
        linia(true);
        /////
        for(int i=0;i<=ilosc_y;i++)//os y gorna
        {            
            Punkt k1=new Punkt(x0-400, y0-d*i*2);
            Punkt k2=new Punkt(x0+400, y0-d*i*2);
            
            Punkt k1_2=Obrot(p0,k1,kat3);
            Punkt k2_2=Obrot(p0,k2,kat3);
            
            g.drawLine((int)k1_2.x,(int)k1_2.y,(int)k2_2.x,(int)k2_2.y);
            
            Punkt l1=new Punkt(x0-400, y0+d*i*2);
            Punkt l2=new Punkt(x0+400, y0+d*i*2);
            
            Punkt l1_2=Obrot(p0,l1,kat3);
            Punkt l2_2=Obrot(p0,l2,kat3);
            
            g.drawLine((int)l1_2.x,(int)l1_2.y,(int)l2_2.x,(int)l2_2.y);
        }
        for(int i=1;i<=ilosc_x;i++)//os x gorna
        {
            g.drawLine(x0-d2*i, 10, x0-d2*i, 2*y0-10);
            g.drawLine(x0+d2*i, 10, x0+d2*i, 2*y0-10);
        }
        /////
        linia(false);
        
        //oś x1 prawa
        Punkt p1=new Punkt(x0+roz+10,y0);
        Punkt p2=Obrot(p0,p1,kat3);
        g.drawLine(x0, y0, (int)p2.x, (int)p2.y);
        ////////////
        
        //oś x2 lewa        
        Punkt p1_2=new Punkt(x0-roz-10,y0);
        Punkt p2_2=Obrot(p0,p1_2,kat3);
        g.drawLine(x0, y0, (int)p2_2.x, (int)p2_2.y);
        
        
        for(int i=0;i<=ilosc_y;i++)//os y gorna
        {
            g.drawLine(x0-7, y0-d*i, x0+7, y0-d*i);
            if(i>0)
            g.drawString(""+skroc(i*h1,miejsca_po_przecinku), x0-(d+4), y0-d*(i)+5);
        }
        
        for(int i=0;i<=ilosc_y;i++)//os y dolna
        {
            g.drawLine(x0-7, y0+d*i, x0+7, y0+d*i);
            if(i>0)
            g.drawString(""+skroc((-1*i)*h1,miejsca_po_przecinku), x0-(d+4), y0+d*(i)+5);
        }
        
        //formatuje os x
        int n=ilosc_x;
        d=roz/ilosc_x;
        h1=max_x/ilosc_x;
        
        
        for(int i=0;i<=n;i++)//os x prawa
        {
            ////////////
            Punkt b1_1=new Punkt(x0+d*i,y0-7);
            Punkt b1_2=new Punkt(x0+d*i,y0+7);
            
            Punkt b2_1=Obrot(p0,b1_1,kat3);
            Punkt b2_2=Obrot(p0,b1_2,kat3);
            g.drawLine((int)b2_1.x, (int)b2_1.y, (int)b2_2.x, (int)b2_2.y);
            ////////////
            
            if(i>0)//???
            {
            g.drawString(""+skroc(i*(max_x/ilosc_x),miejsca_po_przecinku),x0+d*i-4 ,y0+22 );
            }
        }
        
        for(int i=0;i<=n;i++)//os x lewa
        {
            Punkt b1_1=new Punkt(x0-d*i,y0-7);
            Punkt b1_2=new Punkt(x0-d*i,y0+7);
            
            Punkt b2_1=Obrot(p0,b1_1,kat3);
            Punkt b2_2=Obrot(p0,b1_2,kat3);
            g.drawLine((int)b2_1.x, (int)b2_1.y, (int)b2_2.x, (int)b2_2.y);
            
            if(i>0)
            {
            g.drawString(""+skroc((-1)*i*(max_x/ilosc_x),miejsca_po_przecinku),x0-d*i-4 ,y0+22 );
            }
        }
        g.drawString("0", x0-10, y0+15);
    }    
          
    
    public List<String> dyskretny(int liczba)//
    {
        
        //liczba oznacza liczbe przedziałów
        
        
        List<Double> list = kol.Wartosci(kol_nr);
        List<Double> list2=new ArrayList<>();
        int[] tab=new int[list.size()];
        
        List<String> list3 = kol.kolumna(kol_nr);
        
        zDyskretny ds = new zDyskretny();
        
        List<Integer> list4=new ArrayList<>();
        
        List<Double> ds2 = ds.dyskretny(list, liczba, 2);
        List<Double> liczbenosci = ds.dyskretny(list, liczba, 3);
        
        for(int i=0;i<ds2.size();i++){list4.add((int)ds2.get(i).doubleValue());}
        
        ///////////ustalam liczbe przedzialow jesli bedzie nie wlasciwa ,i poczatek i koniec
        double poczatek = Double.MAX_VALUE,koniec=0;
        
        if(liczba<=0){liczba=1;}
        if(liczba>list.size()){liczba=list.size();}
        
        for(int i=0;i<list.size();i++)
        {
            if(list.get(i)<poczatek){poczatek=list.get(i);}
            if(list.get(i)>koniec){koniec=list.get(i);}
        }
        ///////////////////
        
        //double odstep=10;//odstęp w przedziale wykresu dyskretnego
        clean();//czyszcze panel
        
        g.drawString("kolumna: "+kol.Naglow().get(kol_nr), 10, 20);
        g.drawString(" od "+poczatek+" do "+koniec+" na "+liczba+" przedzialow: ", 8, 40);
        
        double odstep = (koniec - poczatek)/liczba;
        
        
        
        double pom=poczatek;
        
        for(int i=0;i<liczba;i++)//tworze przedzialy
        {
            list2.add(pom);
            pom=pom+odstep;
            
        }list2.add(pom);
        
        
        
        //////////////////////////////////////
        // tutaj troche wypisuje
                
        g.drawString("klasa  |  liczebnosc w przedziale |  liczba wg kolejnosci jesli w kolumnie byly znaki", 10, 55);
        for(int i=0;i<list.size();i++)
        {
            g.drawString(""+list3.get(i)+"  |  "+list4.get(i)+"  |  "+list.get(i), 10, 70+15*i);
        }
        
        for(int i=0 ;i<list2.size()-1;i++)
        {
            g.drawString(""+list2.get(i)+" - "+list2.get(i+1)+"  i "+liczbenosci.get(i).intValue()+" w przedziale", 200, 70+15*i);
        }
       
        List<String> lista=new ArrayList<>();
        for(int i=0;i<list.size();i++)//tutaj tworze liste ktora w razie co mozna zapisac do pliku
        {            
            lista.add(""+list4.get(i));
        }
        wyniki=lista;
        
        return lista;
        
    }
    
    
    
    public List<String> normalizacja()
    {
       return normalizacja(0);
    }
    
    public List<String> standaryzacja()//sama standaryzacja
    {
        return normalizacja(1);
    }
    
    public List<String> normalizacja(int rodzaj)//0 normalny ,1 standaryzacja
    {
        List<Punkt> punkty=new ArrayList<>();
        
        clean();
        
        List<String> l1 = kol.kolumna(kol_nr); //
        
        List<Double> l2 = kol.Wartosci(kol_nr); //argumenty x
        List<Double> l3 = new ArrayList<>(); //wartosci po normalizacji
        double suma=0;
        
        if(!kol.sprawdz(kol_nr))
        for(int i=0;i<l2.size();i++)
        {
            suma=suma+l2.get(i);
        }
        
        double srednia=suma/l2.size();
        
        //licze wariancje i odchylenie
        double qu=0;
        for(int i=0;i<l2.size();i++)
        {
            double pom=(l2.get(i)-srednia)*(l2.get(i)-srednia);
            qu=qu+pom;            
        }
        
        double wariancja=qu/l2.size();
        double odchylenie=Math.sqrt(wariancja);
        
        
        ///////////////////////////////////////////////////////
                
        for(int i=0;i<l2.size();i++)
        {
            double pom=(l2.get(i)-srednia)/odchylenie;
            //i odczytuje wartosc z tabeli Dystrybuanty standardowego rozkładu normalnego
            if(rodzaj==0){
            Normalny nor =new Normalny();
            pom=nor.znajdz(pom);
            }
            l3.add(pom);
        }
        
        double max_w_po_normalizacji=0;
        
        for(int i=0;i<l3.size();i++)
        if(Math.abs(l3.get(i))>max_w_po_normalizacji)
        {
            max_w_po_normalizacji=Math.abs(l3.get(i));
        }
         
        double max_x=kol.max(kol_nr);
        double max_y=Math.ceil(max_w_po_normalizacji);
                
        
        List<Slowo2> pom3 = new ArrayList<>();
        for(int i=0;i<l1.size();i++)
        {
            pom3.add(new Slowo2(l1.get(i),l2.get(i),l3.get(i)));
        }
        
        //dodaje do listy ktorą na koniec moge zapisać
        List<String> lista = new ArrayList<>();
        
        for(int i=0;i<pom3.size();i++)
        {
            lista.add(""+pom3.get(i).getLiczba2());
        }
        
        //sortuje dopiero po wpisaniu na liste do zapisania
        //sortuje wg kolejnosci rosnącej
        for(int i=0;i<pom3.size();i++)
        {
            for(int j=0;j<pom3.size()-1;j++)
            {
                if(pom3.get(j).getLiczba1() > pom3.get(j+1).getLiczba1())
                {
                    Slowo2 pom = pom3.get(j+1);
                    pom3.set(j+1,pom3.get(j));
                    pom3.set(j,pom);
                }
            }
        }
                
        ////////////////////////////////////////
        
        for(int i=0;i<pom3.size();i++)
        punkty.add(new Punkt(pom3.get(i).getLiczba1(),pom3.get(i).getLiczba2()));
        
        
        if(rodzaj==0)
        {
            wykres(max_x,10,max_y,10,punkty,true,true,true,"os X "+kol.Naglow().get(kol_nr),"os Y "+"wartosci po normalizacji");
        }
        if(rodzaj==1)
        {
            wykres(max_x,10,max_y,10,punkty,true,true,true,"os X "+kol.Naglow().get(kol_nr),"os Y "+"wartosci po stadaryzacji");
        }
        
        g.drawString("suma: "+suma, 100, 100);
        g.drawString("liczba: "+l2.size(), 100, 120);
        g.drawString("srednia: "+srednia, 100, 140);
        g.drawString("wariancja: "+wariancja, 100, 160);
        g.drawString("odchylenie: "+odchylenie, 100, 180);
        
        
        wyniki=lista;//zapisuje wyniki
        
        return lista;
    }
    
    
    public void rozproszenia()//
    {
        clean();
        List<String> q3 = kol.kolumna(kol_nr3);//3 kolumna jako klasa
        
        List<Double> p1 = kol.Wartosci(kol_nr);
        List<Double> p2 = kol.Wartosci(kol_nr2);
        
        List<Punkt> punkty = new ArrayList<>();
        
        List<Slowo2> lista = new ArrayList<>();
        
        
        ////////////////////////////////
        for(int i=0;i<p1.size();i++)
        {
            punkty.add(new Punkt(p1.get(i),p2.get(i)));
            ///
            lista.add(new Slowo2(q3.get(i),p1.get(i),p2.get(i)));
        }        
        
        wykres(kol.max(kol_nr),10,kol.max(kol_nr2),10,punkty,true,false,false,"os X "+kol.Naglow().get(kol_nr),"os Y "+kol.Naglow().get(kol_nr2),kolor,lista);

                    
    }
    //dane do trybu oceny
    public int metryka=0;
    public int klasa=0;
    //public int sasiedzi=0;
    
    public void ocena_knn()
    {
        clean();
        List<Punkt> punkty = new ArrayList<>();
        
        Tryby tryb = new Tryby();
        kol.Aktualizacja();
        tryb.uaktualnij_miary(kol, klasa, metryka);
        
        List<List<Double>> cov0 = null;
        
        if(metryka==3)
        {
            cov0 = tryb.Metryka.Cov2(kol, klasa, -1);
        }
        
        for(int i=0;i<kol.ileWierszy();i++)
        {
        long time=System.currentTimeMillis();
        List<Integer> list = tryb.oceniaj(kol, klasa, metryka, i,cov0,false,true);
        int liczba=0;
        
        for(int j=0;j<list.size();j++)
        liczba=liczba+list.get(j).intValue();
        
        double ocena = ((double)liczba)/((double)list.size());
        
        punkty.add(new Punkt(i+1,ocena));
        double time2=((double)(System.currentTimeMillis()-time))/1000;
        
        System.out.println(i+1+"  "+ocena+" | czas: "+time2);
        }
        System.out.println("tryb oceny: koniec");
        
        double max_x = punkty.size() ;//liczba porownań
        double max_y = 0 ;//wartosc y nie przekroczy 1
        
        for(int i=0;i<punkty.size();i++)
        if(punkty.get(i).y>max_y)
        {
            max_y=punkty.get(i).y;
        }
        
        int liczba;
        if(punkty.size()>10)
        liczba=10;
        else
        liczba=punkty.size();
        
        wykres(max_x,liczba,max_y,10,punkty,false,true,false,"Ilosc sasiadow","Oceny jakości");
        
    }
    
    public void ocena_drzewa()
    {
        //wyznaczam punkty dla liczby dyskretyzowanych pdzedzialow  ,a ocen drzewa
        //klase biore z pierwszego pola
        clean();
        List<Punkt> punkty = new ArrayList<>();
        zzDrzewo dz = new zzDrzewo();
        
        int klasa = this.klasa;//<<-- narazie
        
        //licze od stopnia dyskretyzacji = 2
        for(int i=2;i<kol.ileWierszy();i++)
        {
            double wynik = dz.ocena3(kol, klasa, i);
            Punkt p = new Punkt(i,wynik);
            
            punkty.add(p);//i dodaje normalnie
        }
        
        double max_x = punkty.size() ;//liczba porownań
        double max_y = 0 ;//wartosc y nie przekroczy 1
        
        for(int i=0;i<punkty.size();i++)
        if(punkty.get(i).y>max_y)
        {
            max_y=punkty.get(i).y;
        }
        
        int liczba;
        if(punkty.size()>10)
        liczba=10;
        else
        liczba=punkty.size();
        
        wykres(max_x,liczba,max_y,10,punkty,false,true,false,"stopień dyskretyzacji","Oceny jakości");
    }
    
    public void Wykres2D()
    {
        List<Double> l1 = kol.Wartosci(this.kol_nr);
        List<Double> l2 = kol.Wartosci(this.kol_nr2);
        List<Punkt> punkty = new ArrayList<>();
        
        double max_x=0,max_y=0;
        for(int i=0;i<l1.size();i++)if(l1.get(i)>max_x){max_x=l1.get(i);}
        for(int i=0;i<l2.size();i++)if(l2.get(i)>max_y){max_y=l2.get(i);}
        for(int i=0;i<l1.size();i++)
        punkty.add(new Punkt(l1.get(i),l2.get(i)));
        
        ///i posortowac te punkty
        int zmienna=1;
        while(zmienna>0)
        {
            zmienna=0;
            for(int i=0;i<punkty.size()-1;i++)
            if(punkty.get(i).x>punkty.get(i+1).x)
            {
                Punkt pom = new Punkt(punkty.get(i+1).x,punkty.get(i+1).y);
                punkty.set(i+1,punkty.get(i));
                punkty.set(i, pom);                
                zmienna++;
            }
        }
        
        int liczba;
        if(punkty.size()>10)
        liczba=10;
        else
        liczba=punkty.size();
        
        wykres(max_x,liczba,max_y,10,punkty,true,true,false,"Ilosc sasiadow","Oceny jakości");
    }
       
    private void jButton5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MouseClicked
        // włączam / wyłączam obracanie
        
        if(obracaj){obracaj=false;}else{obracaj=true;}
        
    }//GEN-LAST:event_jButton5MouseClicked

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        //wybieram kolumne do narysowania
        //kolumna 1
        try{
            int l = Integer.valueOf(jTextField1.getText());
            if(l>=0 && l<kol.ileKolumn()){kol_nr=l;}         
        }catch(Exception e){}
        //kolumna 2
        try{
            int l = Integer.valueOf(jTextField3.getText());
            if(l>=0 && l<kol.ileKolumn()){kol_nr2=l;}         
        }catch(Exception e){}
        //kolumna 3
        try{
            int l = Integer.valueOf(jTextField4.getText());
            if(l>=0 && l<kol.ileKolumn()){kol_nr3=l;}         
        }catch(Exception e){}
        
        reset();
    }//GEN-LAST:event_jButton2MouseClicked

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        //dyskretyzacja zmiennych rzeczywistych na określoną liczbę przedziałów
        
        typ=1;
        jButton11.setVisible(false);
        jButton12.setVisible(false);
        
        try{
        int ile = (int)(double)Double.valueOf(jTextField5.getText().trim());
        dyskretny(ile);
        }catch(Exception e){}
    }//GEN-LAST:event_jButton3MouseClicked

    private void jButton6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton6MouseClicked
        // normalizacja zmiennych rzeczywistych ( (wartość-średnia)/odchylenie_standardowe);
        
        typ=2;
        jButton11.setVisible(false);
        jButton12.setVisible(false);
        normalizacja();                
    }//GEN-LAST:event_jButton6MouseClicked

    private void jButton7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton7MouseClicked
        // wykres rozproszeń dwuwymiarowy
        
        typ=3;           
        jButton12.setVisible(true);
        rozproszenia();        
    }//GEN-LAST:event_jButton7MouseClicked

    private void jButton8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton8MouseClicked
        // kolejnosc alfabetyczna
        typ_wys=1;
        //kol=new Kolumny(naglowki,typ_wys);
        kol.setTyp(typ_wys);
        reset();
    }//GEN-LAST:event_jButton8MouseClicked

    private void jButton9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton9MouseClicked
        //kolejnosc wg kolejnosci wystąpien
        typ_wys=2;
        //kol=new Kolumny(naglowki,typ_wys);
        kol.setTyp(typ_wys);
        reset();
    }//GEN-LAST:event_jButton9MouseClicked

    private void jButton10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton10MouseClicked
        // kolejnosc wg ilosci wystąpien
        typ_wys=3;
        //kol=new Kolumny(naglowki,typ_wys);
        kol.setTyp(typ_wys);
        reset();
    }//GEN-LAST:event_jButton10MouseClicked

    private boolean klik0=true;
    JFramez F0 = null;
    
    
    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        // TODO add your handling code here:
        List<String> p=kol.zmniejsz(kol.kolumna(kol_nr3));
        
        if(F0==null)
        F0 = new JFramez(p.size(),p,kol.Naglow().get(kol_nr3));
        
        
        if(klik0)
        {
            F0.jPanel1.setVisible(true);
            jPanel1.add(F0.jPanel1);
            jPanel1.revalidate();
            jPanel1.repaint(0, 0, F0.jPanel1.getWidth(), F0.jPanel1.getHeight());
            
            klik0=false;
        }
        else
        {
            jPanel1.remove(F0.jPanel1);
            F0.dispose();
            jPanel1.revalidate();
            F0=null;
            reset();
            klik0=true;
        }
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        // TODO add your handling code here:
        if(!kolor)
        {
        kolor=true;
        reset();        
        jButton11.setVisible(true);
        jButton12.setText("Wyłącz oznaczenie klas");
        }else{
        kolor=false;
        reset();        
        jButton11.setVisible(false);
        jButton12.setText("Zaznacz klasy");
        }
    }//GEN-LAST:event_jButton12ActionPerformed

    public boolean potwierdzenie=false;
        
    private int maxx=835,max=631;
    private int xp=0,yp=0;
    private double rr=Math.PI*2;
    private double rrx=rr/maxx;
    private boolean obracaj=false;
    
    private void jPanel1MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseMoved
        
        if(obracaj)
        if(typ!=1){
        Graphics2D g = (Graphics2D)jPanel1.getGraphics();
        
        int x=evt.getX();
        int y=evt.getY();
        if(xp!=x)
        {
            xp=x;
            kat_g=rrx*x;reset();
        }
        if(yp!=y)
        {
            yp=y;
        }
        
        }
    }//GEN-LAST:event_jPanel1MouseMoved

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        
        List<Double> tab1 = kol.Wartosci(kol_nr);
        List<Double> tab2 = kol.Wartosci(kol_nr2);
        List<Double> tab3 = kol.Wartosci(kol_nr3);
        List<Punkt3D> list = new ArrayList<>();
        for(int i=0;i<tab1.size();i++)
        {
            list.add(new Punkt3D(tab1.get(i),tab2.get(i),tab3.get(i)));
        }
        ///////////////////
        List<String> nn = kol.Naglow();
        
        //JFramez8 frame = new JFramez8(list);
        JFramez2 frame = new JFramez2(list,nn.get(kol_nr),nn.get(kol_nr2),nn.get(kol_nr3));
        
        frame.setVisible(true); 
    }//GEN-LAST:event_jButton15ActionPerformed
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        JFramez3 F = new JFramez3(this);
        
        F.setVisible(true);
        reset();
        //Odswierz();
        
    }//GEN-LAST:event_jButton1ActionPerformed
        
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        //dodaje ostatnio przechowaną kolumne do tabeli
        
        if(wyniki.size()!=0)
        kol.dodajKolumne(wyniki);
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        // standaryzacja zmiennych rzeczywistych
        
        typ=4;
        jButton11.setVisible(false);
        jButton12.setVisible(false);
        standaryzacja(); 
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        // tutaj jest tryb oceny dla różnej liczby elementow
        typ=5;
        JFramez9z app = new JFramez9z(this);
        
        //ocena jest wywoływana w app ,linia okolo 160
        //ocena();
    }//GEN-LAST:event_jButton14ActionPerformed

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
        // odwierzam wykres

        Odswierz();
    }//GEN-LAST:event_jButton16ActionPerformed

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
        //rysuje zwykly wykres 2D z podanych kolumn
        clean();
        Wykres2D();
    }//GEN-LAST:event_jButton17ActionPerformed

    private void jButton18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton18ActionPerformed
        // ocena drzewa
        typ=6;        
        JFramezzz12z fr = new JFramezzz12z(this);        
    }//GEN-LAST:event_jButton18ActionPerformed
    
    public void Odswierz()
    {
        if(!odsw.nowa)
        {
        clean();
        wykres(odsw.max_x,odsw.ilosc_x,odsw.max_y,odsw.ilosc_y,odsw.punkty,odsw.pkt,odsw.linie,odsw.info,odsw.nazwa_x,odsw.nazwa_y,odsw.rozproszenia,odsw.lista);
        }
    }
    
    
    public void postData()
    {
        kol.setLinie(listx);
                
        //reset();
        Odswierz();
    }    
    
    
    public Punkt Obrot(Punkt p0,Punkt p1,double kat)
    {
        kat=-1*kat;//obracam w lewo
        double x0=p0.x,y0=p0.y;
        double x1=p1.x,y1=p1.y;
        double x2=0,y2=0;
        
        double a=1,b=0.5;
        
        x2=a*((x1-x0)*Math.cos(kat)+(y1-y0)*Math.sin(kat))+x0;
        y2=b*((x1-x0)*Math.sin(kat)-(y1-y0)*Math.cos(kat))+y0;
           
        return new Punkt(x2,y2);
    }
    
    
    private void reset()
    {
        
        
        if(typ==1)
        {
            try{
            int ile = (int)(double)Double.valueOf(jTextField5.getText().trim());
            dyskretny(ile);
            }catch(Exception e){}
        }
        if(typ==2)
        {
            normalizacja();
        } 
        if(typ==3)
        {
            rozproszenia();
            jButton12.setVisible(true);
        } 
        if(typ==4)
        {
            standaryzacja();
        } 
        if(typ==5)
        {
            ocena_knn();
        }
        if(typ==6)
        {
            this.ocena_drzewa();
        }
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrameAplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrameAplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrameAplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrameAplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrameAplication().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton18;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JFrame jFrame2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private java.awt.Label label1;
    // End of variables declaration//GEN-END:variables
}
